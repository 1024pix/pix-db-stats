#
# This file is a place where the behaviour of environment variable is defined.
#
# It can be used to:
# - set up a PaaS application wich provide a service to set environment variable
# - run the code locally, without PaaS
#
# To run the code locally, you had to create a minimal configuration file
# It will be read by Dotenv and exposed throught NodeJS process.env global variable
#
# Instructions:
#   1. copy this file as `.env`
#   2. edit the `.env` file with working values
#   3. uncomment the lines to activate or configure associated features
#
# Line size max: 80 characters.
#


# =========
# HOSTING
# =========

# Name of region which is hosting the application whose database is to be monitored
# If not present, the application will crash
#
# presence: required
# type: text
# default: none
SCALINGO_REGION=

# Name of the applications whose databases has to be monitored
# If not present, the application will crash
#
# presence: required
# type: array of text
# default: none
SCALINGO_APPS=

# =========
# AUTHENTICATION
# =========

# API token who grant access to the application whose database is to be monitored
# If not present, the application will crash
#
# presence: required
# type: text
# default: none
SCALINGO_TOKEN=

# =========
# SCHEDULING
# =========

# Enable metrics monitoring
#
# presence: optional
# type: text
# value: yes to activate
FT_METRICS=yes

# Enable statements monitoring
#
# presence: optional
# type: text
# value: yes to activate
FT_STATEMENTS=yes

# Enable response time monitoring
#
# presence: optional
# type: text
# value: yes to activate
FT_RESPONSE_TIME=yes

# Enable progress (vacuum, create index...) monitoring
#
# presence: optional
# type: text
# value: yes to activate
FT_PROGRESS=yes

# Execution periodicity (for node-cron library, in a cron-like pattern)
# Cron patterns have five fields, and 1 minute as the finest granularity
# But this library has six fields, with 1 second as the finest granularity.
# See https://github.com/kelektiv/node-cron#available-cron-patterns
#
# Metrics Schedule
# If not present, the application will crash
#
# presence: required
# type: text
# default: none
# each 15 seconds
METRICS_SCHEDULE=*/15 * * * * *

# Statements Schedule
# If not present, the application will crash
#
# presence: required
# type: text
# default: none
# each hour
STATEMENTS_SCHEDULE=* * */1 * * *

# Response time schedule
# If not present, the application will crash
#
# presence: required
# type: text
# default: none
# each 15 seconds
RESPONSE_TIME_SCHEDULE=*/15 * * * * *

# Progress reporting schedule
#
# presence: optional
# type: text
# default: 0 */10 * * * *
PROGRESS_SCHEDULE=0 */10 * * * *

# =========
# RESPONSE_TIME
# =========

# Query used for response time
# This query will be run in a read-only transaction, so use a SELECT
#
# presence: optional
# type: text
# default: SELECT pg_sleep(1)
RESPONSE_TIME_QUERY=SELECT id FROM users ORDER BY RANDOM() LIMIT 1


# URL of the PostgreSQL database used for testing
#
# If not present, the application test will fail
#
# presence: required
# type: Url
# default: none
TEST_DATABASE_URL=postgresql://user@localhost/database
